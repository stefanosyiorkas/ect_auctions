{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\nconst isLocalhost=Boolean(window.location.hostname==='localhost'||window.location.hostname==='[::1]'||window.location.hostname.match(/^127(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){const publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin)return;window.addEventListener('load',()=>{const swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){checkValidServiceWorker(swUrl,config);navigator.serviceWorker.ready.then(()=>console.log('Service worker ready (localhost)'));}else{registerValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(registration=>{registration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null)return;installingWorker.onstatechange=()=>{if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){console.log('New content is available.');if(config&&config.onUpdate)config.onUpdate(registration);}else{console.log('Content is cached for offline use.');if(config&&config.onSuccess)config.onSuccess(registration);}}};};}).catch(error=>console.error('Error during service worker registration:',error));}function checkValidServiceWorker(swUrl,config){fetch(swUrl,{headers:{'Service-Worker':'script'}}).then(response=>{const contentType=response.headers.get('content-type');if(response.status===404||contentType&&contentType.indexOf('javascript')===-1){navigator.serviceWorker.ready.then(registration=>registration.unregister());}else{registerValidSW(swUrl,config);}}).catch(()=>console.log('No internet connection.'));}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(registration=>registration.unregister()).catch(error=>console.error(error.message));}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","message"],"sources":["/Users/stefanosgiorkas/Downloads/ect_auctions/frontend/src/serviceWorkerRegistration.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(/^127(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)){3}$/)\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) return;\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          checkValidServiceWorker(swUrl, config);\n          navigator.serviceWorker.ready.then(() =>\n            console.log('Service worker ready (localhost)')\n          );\n        } else {\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) return;\n  \n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                console.log('New content is available.');\n                if (config && config.onUpdate) config.onUpdate(registration);\n              } else {\n                console.log('Content is cached for offline use.');\n                if (config && config.onSuccess) config.onSuccess(registration);\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => console.error('Error during service worker registration:', error));\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl, { headers: { 'Service-Worker': 'script' } })\n      .then((response) => {\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType && contentType.indexOf('javascript') === -1)\n        ) {\n          navigator.serviceWorker.ready.then((registration) => registration.unregister());\n        } else {\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => console.log('No internet connection.'));\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => registration.unregister())\n        .catch((error) => console.error(error.message));\n    }\n  }\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}